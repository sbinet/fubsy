# fubsy build script to build fubsy itself

# XXX this requires:
#   * export GOPATH=`pwd`
#
# XXX this omits:
#   * probing for database libraries (no configure phase!)
#   * setting build tags based on that

main {

    #platform = "linux_amd64"
    #pkg = "pkg/$platform"

    # XXX what I really want is this:
    #   buildtags = ["kyotodb"]
    #   tagflag = "-tags='${buildtags.join(\' \')}'"
    # but there's a bit more work to do before Fubsy supports
    # that syntax, so for now we have to put up with
    tagflag = "-tags='kyotodb'"
    # ...and you'll just have to edit it manually to modify tags

    # some tools needed to build/test
    golex = "bin/golex"
    gocov = "bin/gocov"
    golex: <src/github.com/cznic/**/*.go> {
        "go install -v github.com/cznic/golex"
    }
    gocov: <src/github.com/axw/gocov/**/*.go> {
        "go install -v github.com/axw/gocov/gocov"
    }

    # generate lexer and parser
    src = "src/fubsy"
    "$src/dsl/fulex.go": "$src/dsl/fulex.l" {
        "$golex -o $TARGET $SOURCE"
        "gofmt -w $TARGET"
    }
    "$src/dsl/fugrammar.go": "$src/dsl/fugrammar.y" {
        "go tool yacc -p fu -o $TARGET $SOURCE"
        "gofmt -w $TARGET"
    }

    # and build fubsy: all package *.a files and the binary
    # (ignoring the package files because I don't know what
    # the current platform is: need to run "go env" and parse
    # out GOHOSTOS, GOHOSTARCH)
    localsrc = <$src/**/*.go>
    "bin/fubsy": localsrc {
        "go install -v fubsy/..."
    }

    # One way to do incremental testing. There are many possible
    # variations on this theme:
    # - depend on the binary pkg file, so we only re-run tests
    #   after changes that affect compiler output (but then
    #   we have to explicitly build the binary pkg file)
    # - re-run tests in downstream packages: e.g. changes to
    #   fubsy/types could affect fubsy/dag, so we should run
    #   both tests after modifying fubsy/types
    # - explicitly build the test executable and depend on it
    #
    # Also, it would obviously be nice to discover the list of
    # packages dynamically and loop over them. That'll have to wait
    # until we have plugins.

    ActionNode("test/fubsy/build:action"): <$src/build/*.go> {
        "go test fubsy/build"
    }
    ActionNode("test/fubsy/dag:action"): <$src/dag/*.go> {
        "go test fubsy/dag"
    }
    ActionNode("test/fubsy/db:action"): <$src/db/*.go> {
        "go test fubsy/db"
    }
    ActionNode("test/fubsy/dsl:action"): <$src/dsl/*.go> {
        "go test fubsy/dsl"
    }
    ActionNode("test/fubsy/log:action"): <$src/log/*.go> {
        "go test fubsy/log"
    }
    ActionNode("test/fubsy/runtime:action"): <$src/runtime/*.go> {
        "go test fubsy/runtime"
    }
    ActionNode("test/fubsy/types:action"): <$src/types/*.go> {
        "go test fubsy/types"
    }

    ActionNode("check/vet:action"): localsrc {
        "go vet fubsy/..."
    }
    # XXX can't do this yet: no backslash escapes, no multiline strings
    #ActionNode("check/fmt:action"): localsrc {
    #    "needfmt=`gofmt -l $src` ; if [ \"$needfmt\" ]; then exit 1; fi"
    #}
}
